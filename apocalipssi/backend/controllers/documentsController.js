const mongoose = require("mongoose")
const fs = require("fs")
const Document = require("../models/documentsModel")
const pdf = require("pdf-parse")

// üì§ Upload - Version corrig√©e
exports.uploadDocument = async (req, res) => {
  console.log("üì§ D√©but upload document")

  if (!req.file) {
    return res.status(400).json({ message: "Aucun fichier re√ßu" })
  }

  try {
    console.log("üìÑ Fichier re√ßu:", {
      originalname: req.file.originalname,
      filename: req.file.filename,
      size: req.file.size,
      path: req.file.path,
    })

    // Attendre que GridFS soit initialis√©
    const gfs = req.app.locals.gfs
    if (!gfs) {
      // Nettoyer le fichier temporaire
      fs.unlinkSync(req.file.path)
      return res.status(500).json({ message: "GridFS non initialis√©" })
    }

    const bucket = new mongoose.mongo.GridFSBucket(mongoose.connection.db, {
      bucketName: "documents",
    })

    const uploadStream = bucket.openUploadStream(req.file.originalname, {
      metadata: {
        originalName: req.file.originalname,
        username: req.body.username || "anonyme",
        uploadDate: new Date(),
      },
    })

    const fileStream = fs.createReadStream(req.file.path)

    fileStream
      .pipe(uploadStream)
      .on("error", (err) => {
        console.error("‚ùå Erreur upload stream:", err)
        // Nettoyer le fichier temporaire
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path)
        }
        return res.status(500).json({ message: "Erreur lors de l'upload", error: err.message })
      })
      .on("finish", async () => {
        try {
          console.log("‚úÖ Upload vers GridFS termin√©")

          // Supprimer fichier temporaire
          if (fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path)
            console.log("üóëÔ∏è Fichier temporaire supprim√©")
          }

          // Sauvegarder les m√©tadonn√©es en DB
          const doc = new Document({
            username: req.body.username || "anonyme",
            fileId: uploadStream.id,
            originalName: req.file.originalname,
            uploadDate: new Date(),
          })

          await doc.save()
          console.log("üíæ M√©tadonn√©es sauvegard√©es en DB")

          res.status(201).json({
            message: "Fichier upload√© avec succ√®s",
            document: doc,
            fileId: uploadStream.id,
          })
        } catch (saveError) {
          console.error("‚ùå Erreur sauvegarde DB:", saveError)
          res.status(500).json({ message: "Erreur sauvegarde", error: saveError.message })
        }
      })
  } catch (err) {
    console.error("‚ùå Erreur g√©n√©rale upload:", err)
    // Nettoyer le fichier temporaire en cas d'erreur
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path)
    }
    res.status(500).json({ message: "Erreur serveur", error: err.message })
  }
}

// üìã Liste - Version corrig√©e
exports.getAllDocuments = async (req, res) => {
  try {
    console.log("üìã R√©cup√©ration liste documents")
    const docs = await Document.find().sort({ uploadDate: -1 })
    console.log(`üìä ${docs.length} documents trouv√©s`)
    res.json(docs)
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration documents:", err)
    res.status(500).json({ message: err.message })
  }
}

// ‚¨áÔ∏è T√©l√©chargement - Version corrig√©e
exports.downloadDocument = async (req, res) => {
  console.log("‚¨áÔ∏è D√©but t√©l√©chargement:", req.params.fileId)

  const gfs = req.app.locals.gfs
  if (!gfs) {
    return res.status(500).json({ message: "GridFS non initialis√©" })
  }

  try {
    const fileId = new mongoose.Types.ObjectId(req.params.fileId)
    console.log("üîç Recherche fichier ID:", fileId)

    const filesCursor = await gfs.find({ _id: fileId })
    const files = await filesCursor.toArray()

    if (!files || files.length === 0) {
      console.log("‚ùå Fichier non trouv√©")
      return res.status(404).json({ message: "Fichier introuvable" })
    }

    const file = files[0]
    console.log("‚úÖ Fichier trouv√©:", file.filename)

    res.set("Content-Type", file.contentType || "application/octet-stream")
    res.set("Content-Disposition", `attachment; filename="${file.filename}"`)

    const downloadStream = gfs.openDownloadStream(file._id)
    downloadStream.pipe(res)

    downloadStream.on("error", (err) => {
      console.error("‚ùå Erreur stream t√©l√©chargement:", err)
      res.status(500).json({ message: "Erreur t√©l√©chargement" })
    })
  } catch (err) {
    console.error("‚ùå Erreur t√©l√©chargement:", err)
    res.status(500).json({ message: err.message })
  }
}

// üóëÔ∏è Suppression - Version corrig√©e
exports.deleteDocument = async (req, res) => {
  console.log("üóëÔ∏è D√©but suppression:", req.params.id)

  const gfs = req.app.locals.gfs
  if (!gfs) {
    return res.status(500).json({ message: "GridFS non initialis√©" })
  }

  try {
    const doc = await Document.findById(req.params.id)
    if (!doc) {
      return res.status(404).json({ message: "Document non trouv√©" })
    }

    console.log("üîç Document trouv√©, suppression du fichier GridFS...")
    await gfs.delete(doc.fileId)

    console.log("üóëÔ∏è Suppression des m√©tadonn√©es DB...")
    await doc.deleteOne()

    console.log("‚úÖ Suppression termin√©e")
    res.json({ message: "Document et fichier supprim√©s avec succ√®s" })
  } catch (err) {
    console.error("‚ùå Erreur suppression:", err)
    res.status(500).json({ message: err.message })
  }
}

// ü§ñ Analyse IA - Votre code existant (inchang√©)
exports.analyzeDocument = async (req, res) => {
  console.log("ü§ñ D√©but analyse IA:", req.params.id)

  const gfs = req.app.locals.gfs
  if (!gfs) {
    return res.status(500).json({ message: "GridFS non initialis√©" })
  }

  try {
    const doc = await Document.findById(req.params.id)
    if (!doc) {
      return res.status(404).json({ message: "Document non trouv√©" })
    }

    console.log("üìÑ Document trouv√©, t√©l√©chargement pour analyse...")

    // T√©l√©charger le fichier depuis GridFS
    const downloadStream = gfs.openDownloadStream(doc.fileId)
    const chunks = []

    downloadStream.on("data", (chunk) => chunks.push(chunk))

    downloadStream.on("error", (err) => {
      console.error("‚ùå Erreur t√©l√©chargement pour analyse:", err)
      return res.status(500).json({ message: "Erreur lors du t√©l√©chargement", error: err.message })
    })

    downloadStream.on("end", async () => {
      try {
        console.log("üìñ Extraction du texte PDF...")
        const buffer = Buffer.concat(chunks)

        // Extraire le texte du PDF
        const pdfData = await pdf(buffer)
        const text = pdfData.text

        if (!text || text.trim().length === 0) {
          return res.status(400).json({ message: "Impossible d'extraire le texte du PDF" })
        }

        console.log(`üìä Texte extrait: ${text.length} caract√®res`)

        // Pr√©parer le prompt pour l'IA
        const prompt = `Analyse ce document et fournis une r√©ponse structur√©e en JSON avec les cl√©s suivantes:
        - "resume": un r√©sum√© concis du document (2-3 phrases)
        - "points_cles": une liste de 3-5 points cl√©s principaux
        - "suggestions_actions": une liste de 3-4 suggestions d'actions concr√®tes

        Document √† analyser:
${text.substring(0, 3000)}...`

        console.log("ü§ñ Appel API Hugging Face...")

        // Appel √† l'API Hugging Face
        const response = await fetch("https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.3", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            inputs: prompt,
            parameters: {
              max_new_tokens: 500,
              temperature: 0.7,
              return_full_text: false,
            },
          }),
        })

        if (!response.ok) {
          throw new Error(`Erreur API Hugging Face: ${response.status}`)
        }

        const aiResponse = await response.json()
        console.log("‚úÖ R√©ponse IA re√ßue")

        let analysisText = ""
        if (Array.isArray(aiResponse) && aiResponse[0]?.generated_text) {
          analysisText = aiResponse[0].generated_text
        } else if (aiResponse.generated_text) {
          analysisText = aiResponse.generated_text
        } else {
          throw new Error("Format de r√©ponse inattendu de l'API")
        }

        // Tenter de parser le JSON ou cr√©er une structure par d√©faut
        let analysis
        try {
          // Chercher du JSON dans la r√©ponse
          const jsonMatch = analysisText.match(/\{[\s\S]*\}/)
          if (jsonMatch) {
            analysis = JSON.parse(jsonMatch[0])
          } else {
            throw new Error("Pas de JSON trouv√©")
          }
        } catch (parseError) {
          console.log("‚ö†Ô∏è Parsing JSON √©chou√©, structure par d√©faut")
          // Si le parsing JSON √©choue, cr√©er une structure par d√©faut
          analysis = {
            resume: "Analyse g√©n√©r√©e par IA - voir le texte complet ci-dessous",
            points_cles: ["Document analys√© avec succ√®s", "Contenu extrait du PDF", "Analyse IA disponible"],
            suggestions_actions: [
              "R√©viser le contenu du document",
              "Identifier les points d'action",
              "Planifier les √©tapes suivantes",
            ],
            texte_complet_ia: analysisText,
          }
        }

        console.log("‚úÖ Analyse termin√©e avec succ√®s")

        res.json({
          document: {
            id: doc._id,
            nom_original: doc.originalName,
            utilisateur: doc.username,
            date_upload: doc.uploadDate,
          },
          analyse: analysis,
          metadata: {
            nombre_pages: pdfData.numpages,
            longueur_texte: text.length,
            date_analyse: new Date(),
          },
        })
      } catch (error) {
        console.error("‚ùå Erreur lors de l'analyse:", error)
        res.status(500).json({
          message: "Erreur lors de l'analyse du document",
          error: error.message,
        })
      }
    })
  } catch (err) {
    console.error("‚ùå Erreur g√©n√©rale analyse:", err)
    res.status(500).json({ message: "Erreur serveur", error: err.message })
  }
}
